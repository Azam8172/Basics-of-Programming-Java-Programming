# Basics-of-Programming-Java-Programming



Square Root Of an Integer
easy
Time Limit: 2 sec
Memory Limit: 128000 kB
Problem Statement
Given an integer N. The task is to find the square root of N. If N is not a perfect square, then return floor(√N).

Try to solve the problem using Binary Search.
Input
The first line of input contains number of testcases T. For each testcase, the only line contains the number N.

Constraints:
1 ≤ T ≤ 10000
0 ≤ x ≤ 100000000
Output
For each testcase, print square root of given integer.
Example
Sample Input:
2
5
4

Sample Output:
2
2

Explanation:
Testcase 1: Since, 5 is not perfect square, so floor of square_root of 5 is 2.
Testcase 2: Since, 4 is a perfect square, so its square root is 2.


?????????///////////////////////////**************************************************?????????????????????????????????????


import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
    public static void main (String[] args) {
                      // Your code here
                      Scanner sc = new Scanner(System.in);
                      int t = sc.nextInt();
                      while(t>0)
                      {
                          t--;
                          System.out.println(mySqrt(sc.nextLong()));
                      }
    }
    static long mySqrt(long x) {

        if(x<=1)
             return x;
         long l = 2;
         long h = x/2;

         while(l<=h)
         {

             long mid = l + (h-l)/2;
             long pos = (long)mid * mid ;

             if(pos>x)
             {
                 h = mid - 1;
             }
             else if(pos<x)
                  l = mid + 1;
             
             else

                 return mid;

         }    
         return h;
    }
}
