# Basics-of-Programming-Java-Programming





Sort Doubly Linked List Using Merge Sort
easy
hint
Hint

Time Limit: 2 sec
Memory Limit: 128000 kB
Problem Statement
The head of the doubly linked list will be given to you, and you must sort it using merge sort.
Input
You will be given the head of doubly Linked List and its length.

Constraints:
0<= n <=10000
Output
Return the HEAD of the sorted linked list.

////////////////////////***************************************///////////////////********************************************************//////////////////////////




/////////////// C+++++++//////////////*********************************//////////////


#include <iostream>
using namespace std;

// Doubly linked list node class.
class Node
{
public:
   int data;
   Node *next, *prev;

   // Constructor.
   Node(int data)
   {
       this->data = data;
       next = NULL;
       prev = NULL;
   }
};

// This function divides the linked list into two parts and returns the head of second half.
Node *split(Node *head)
{
   Node *slowPointer = head;
   Node *fastPointer = head;
   while (fastPointer != NULL && fastPointer->next != NULL &&
          fastPointer->next->next != NULL)
   {
       fastPointer = fastPointer->next->next;
       slowPointer = slowPointer->next;
   }
   Node *secondHalf = slowPointer->next;

   // Separating the second part.
   slowPointer->next = NULL;
   return secondHalf;
}

// This function will merge two lists and will return the sorted list.
Node *merge(Node *firstList, Node *secondList)
{
   // If the 'firstList' linked list is empty, then we dont have to merge.
   if (firstList == NULL)
       return secondList;

   // If the 'secondList' linked list is empty, then donâ€™t have to merge.
   if (secondList == NULL)
       return firstList;

   // Regular merge conditions.
   if (firstList->data > secondList->data)
   {
       secondList->next = merge(firstList, secondList->next);
       secondList->next->prev = secondList;
       secondList->prev = NULL;
       return secondList;
   }
   else
   {
       firstList->next = merge(firstList->next, secondList);
       firstList->next->prev = firstList;
       firstList->prev = NULL;
       return firstList;
   }
}

// It returns the sorted doubly linked list.
Node *mergeSort(Node *head)
{
   if (head == NULL) {
       return head;
   }

   if (head->next == NULL) {
       return head;
   }

   Node *firstList = NULL, *secondList = NULL;
   // Splitting the list.
   secondList = split(head);

   // Recursively calling merge sort on both the sublists.
   firstList = mergeSort(head);
   secondList = mergeSort(secondList);

   // Merging the two sorted sub lists.
   Node *sortedList = merge(firstList, secondList);
   return sortedList;
}

// Print function.
void print(Node *head)
{
   Node *temp = head;
   while (temp != NULL)
   {
       cout << temp->data << " ";
       temp = temp->next;
   }
}

// Main function.
int main()
{
   int n;
   
   cin >> n;

  
   Node *head = NULL, *tail = NULL;

   for (int i = 0; i < n; i++)
   {
       int data;
       cin >> data;
       Node *newNode = new Node(data);
       if (i == 0)
       {
           head = tail = newNode;
       }
       else
       {
           tail->next = newNode;
           newNode->prev = tail;
           tail = newNode;
       }
   }
   

   // Calling the 'mergeSort()' function to sort the doubly linked list.
   head = mergeSort(head);

   // Printing the final list.
   print(head);
   return 0;
}
