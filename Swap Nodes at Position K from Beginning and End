Swap Nodes at Position K from Beginning and End
easy
Time Limit: 2 sec
Memory Limit: 128000 kB
Problem Statement
You are given head which is a reference node to a doubly- linked list of integers and an integer K. Complete the function swapNodes which swaps the values of nodes at distance K from beginning and end. The first node is at distance 1 from beginning.
Input
User task:
Since this will be a functional problem, you don't have to take input. You just have to complete the function swapNodes that takes the head of the linked list and node distance K as parameters.

Constraints:
1 <= Number of nodes <= 10000.
1 <= K <= Number of nodes
Output
The function need not return anything.
Example
Sample Input 1:-
5 2
1 2 3 4 5

Sample Output 1:-
1 4 3 2 5

Explanation:
The node at distance 2 from beginning is 2.
The node at distance 2 from end is 4.
We will swap 2 and 4.

Sample Input 2:-
3 2
1 2 3

Sample Output 2:-
1 2 3

Explanation:
The node at distance 2 from beginning is 2.
The node at distance 2 from end is 2.
We will swap 2 and 2. So, the linked list remains as it is.



















///////////////////////////////////////////////////****************************************************************************










/*
class Node
{
   int data;
   Node next, prev;
};
*/


static void swap(Node pa, Node pb){
        // swap parents
        Node a = pa.next, b = pb.next;
        pa.next = b;
        pb.next = a;
        // swap children
        Node temp = a.next;
        a.next = b.next;
        b.next = temp;
    }

    public static Node swapNodes(Node head, int k){
        Node dummy = new Node(), pa = dummy, pb = dummy, a = head, b = head;
        dummy.next = head;

        // find parent-a
        int count = 0;
        while(++count < k) {
            pa = pa.next;
            a = a.next;
        }
        // find parent-b
        while(a.next!= null) {
            a = a.next;
            pb = pb.next;
            b = b.next;
        }
        swap(pa, pb);
        return dummy.next;
    }
